AWSTemplateFormatVersion: '2010-09-09'
Description: 'Website Infrastructure for Agentic - S3 and CloudFront Setup'

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: Environment name (staging, prod)
    AllowedValues: [staging, prod]
  
  DomainName:
    Type: String
    Default: ''
    Description: Custom domain name for the website (optional)
  
  CertificateArn:
    Type: String
    Default: ''
    Description: ACM certificate ARN for custom domain (required if DomainName is provided)

Resources:
  # S3 Bucket for Website Content
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'agentic-website-${AWS::AccountId}-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-website

  # S3 Bucket Policy for CloudFront Access
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # Origin Access Control for CloudFront
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub 'agentic-website-oac-${Environment}'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Aliases: !If 
          - HasCustomDomain
          - [!Ref DomainName]
          - !Ref 'AWS::NoValue'
        ViewerCertificate: !If
          - HasCustomDomain
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref OriginAccessControl
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ErrorPages:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
        Tags:
          - Key: Environment
            Value: !Ref Environment
          - Key: Service
            Value: agentic-website

  # CloudFront Function for SPA Routing
  SPAFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub 'agentic-website-spa-function-${Environment}'
      FunctionConfig:
        Comment: 'SPA routing function for agentic website'
        Runtime: cloudfront-js-2.0
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var uri = request.uri;
          
          // Check if the request is for a file with an extension
          if (uri.includes('.')) {
            return request;
          }
          
          // For all other requests, serve index.html
          request.uri = '/index.html';
          return request;
        }

  # CloudFront Function Association
  FunctionAssociation:
    Type: AWS::CloudFront::FunctionAssociation
    Properties:
      FunctionARN: !GetAtt SPAFunction.FunctionARN
      EventType: viewer-request
      DistributionId: !Ref CloudFrontDistribution

  # IAM Role for Lambda@Edge (if needed for more complex routing)
  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'agentic-website-lambda-edge-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-website

  # CloudWatch Log Group for CloudFront
  CloudFrontLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/cloudfront/agentic-website-${Environment}'
      RetentionInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-website

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, '']]

Outputs:
  WebsiteBucketName:
    Description: 'S3 Bucket Name for Website Content'
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucketName'

  WebsiteBucketArn:
    Description: 'S3 Bucket ARN for Website Content'
    Value: !GetAtt WebsiteBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucketArn'

  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CloudFrontDomainName:
    Description: 'CloudFront Distribution Domain Name'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomainName'

  WebsiteUrl:
    Description: 'Website URL'
    Value: !If
      - HasCustomDomain
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteUrl'

  OriginAccessControlId:
    Description: 'Origin Access Control ID'
    Value: !Ref OriginAccessControl
    Export:
      Name: !Sub '${AWS::StackName}-OriginAccessControlId'

  SPAFunctionName:
    Description: 'SPA Routing Function Name'
    Value: !Ref SPAFunction
    Export:
      Name: !Sub '${AWS::StackName}-SPAFunctionName'

  LambdaEdgeRoleArn:
    Description: 'Lambda@Edge Role ARN'
    Value: !GetAtt LambdaEdgeRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaEdgeRoleArn'
