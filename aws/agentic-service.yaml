AWSTemplateFormatVersion: '2010-09-09'
Description: 'Universal Auth A2A MCP Lambda Function'

Conditions:
  HasVersion: !Not [!Equals [!Ref FunctionZipVersion, ""]]

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: Environment name (staging, prod)
    AllowedValues: [staging, prod]
  Project:
    Type: String
    Default: demo
    Description: Project name (demo, venture, volunteer)
  FunctionZipVersion:
    Type: String
    Description: S3 object version for the function zip file
    Default: ""
  FoundationDeploymentBucket:
    Type: String
    Description: S3 bucket name from foundation stack
    Default: ""

Resources:
  # Lambda Function
  A2aMcpFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'agentic-service-a2a-mcp-${Project}-${Environment}'
      Runtime: nodejs18.x
      Handler: dist/index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref FoundationDeploymentBucket
        S3Key: !Sub '${Project}/function.zip'
        S3ObjectVersion: !If [HasVersion, !Ref FunctionZipVersion, !Ref AWS::NoValue]
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          NODE_ENV: !Ref Environment
          NODE_OPTIONS: "--enable-source-maps"
          VALKEY_ENDPOINT: !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-ValkeyCacheEndpoint'
          VALKEY_PORT: !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-ValkeyCachePort'
          VALKEY_PASSWORD_SECRET_ARN: !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-ValkeyPasswordSecretArn'
      Timeout: 30
      MemorySize: 256
      VpcConfig:
        SubnetIds:
          - !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-DefaultSubnet1'
          - !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-DefaultSubnet2'
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: agentic-service-a2a-mcp

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'agentic-service-a2a-mcp-lambda-${Project}-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub
                  - 'arn:aws:s3:::${BucketName}/${Project}/*'
                  - BucketName: !Ref FoundationDeploymentBucket
                    Project: !Ref Project
        - PolicyName: OutboundHttpAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: ElastiCacheAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticache:DescribeCacheClusters
                  - elasticache:DescribeCacheSubnetGroups
                Resource: '*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !ImportValue 
                  Fn::Sub: 'agentic-foundation-${Environment}-ValkeyPasswordSecretArn'
        - PolicyName: VPCAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: '*'

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'agentic-service-a2a-mcp-api-${Project}-${Environment}'
      Description: 'API Gateway for Universal Auth A2A MCP Lambda Function'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: '{proxy+}'

  # API Gateway Method
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${A2aMcpFunction.Arn}/invocations'
      RequestParameters:
        method.request.path.proxy: true

  # API Gateway Root Method
  ApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${A2aMcpFunction.Arn}/invocations'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethod
      - ApiRootMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # Lambda Security Group
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function to access Valkey cache and VPC endpoints
      VpcId: !ImportValue 
        Fn::Sub: 'agentic-foundation-${Environment}-DefaultVpc'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          DestinationSecurityGroupId: !ImportValue 
            Fn::Sub: 'agentic-foundation-${Environment}-ValkeySecurityGroupId'
          Description: Allow Lambda to access Valkey cache
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
          Description: Allow Lambda to access VPC endpoints
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow Lambda to access AWS services (HTTPS)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow Lambda to access AWS services (HTTP)
      Tags:
        - Key: Name
          Value: !Sub 'agentic-service-a2a-mcp-lambda-sg-${Project}-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref A2aMcpFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*'

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/agentic-service-a2a-mcp-${Project}-${Environment}'
      RetentionInDays: 14

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  LambdaFunctionArn:
    Description: 'Lambda Function ARN'
    Value: !GetAtt A2aMcpFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  LambdaFunctionName:
    Description: 'Lambda Function Name'
    Value: !Ref A2aMcpFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'



 